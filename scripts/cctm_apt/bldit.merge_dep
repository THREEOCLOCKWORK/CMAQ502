#!/bin/csh -f

# ================== MERGE_DEPv5.0.2 Build Script =================== #
# Usage: bldit.merge_dep >&! bldit.merge_dep.log                      #
# Requirements: a Fortran compiler                                    #
# Note that this script is configured/tested for Red Hat Linux O/S    #
# The following environment variables must be set for this script to  #
# build an executable.                                                #
#   setenv M3MODEL <source code repository>                           #
#   setenv M3LIB   <code libraries>                                   #
# To report problems or request help with this script/program:        #
#             http://www.cmascenter.org/html/help.html                #
# =================================================================== #

#> Source the config.cmaq file to set the build environment
 source ../config.cmaq

#> Check for M3HOME and M3LIB settings:
 if ( ! -e $M3HOME || ! -e $M3LIB ) then
    echo "   $M3HOME or $M3LIB directory not found"
    exit 1
 endif
 echo "    Model repository base path: $M3HOME"
 echo "                  library path: $M3LIB"

#> If $M3MODEL not set, default to $M3HOME
 if ( $?M3MODEL ) then
    echo "         Model repository path: $M3MODEL"
 else
    setenv M3MODEL $M3HOME
    echo " default Model repository path: $M3MODEL"
 endif

 set BLD_OS = `uname -s`        ## Script set up for Linux only 
 if ($BLD_OS != 'Linux') then
    echo "   $BLD_OS -> wrong bldit script for host!"
    exit 1
 endif

 set echo
 set RM = "/bin/rm -f"

#:#:#:#:#:#:#:#:#:#:#:# Begin User Input Section #:#:#:#:#:#:#:#:#:#:#:#

#> user choices: Git repository
 setenv REPOROOT $M3MODEL/CCTM_APT

#> user choices: base working directory, application string
 set Base = $cwd
 set APPL  = D502_apt

#> CCTM_APT must be built before compiling the merge utilities
 set APT_PATH = $Base/BLD_${APPL}
 if ( ! -e "$APT_PATH" ) then
    echo "   *** CCTM_APT directory ${APT_PATH} does not exist ***"
    exit 1
 endif

 cd $APT_PATH

#> user choices:  single or multiple processors
 set ParOpt         # set for multiple PE's; comment out for single PE

#> user choices: computing system configuration:
#>    compiler name and location/link flags
#>    library paths

#> Set full path of Fortran 90 and C compilers
 set FC = ${myFC}
 set FP = $FC
 set CC = ${myCC}

#> Set location of libraries/include files
 set LIOAPI  = "${M3LIB}/ioapi_3.1/Linux2_${system}${compiler_ext} -lioapi"
 set IOAPIMOD = ${M3LIB}/ioapi_3.1/Linux2_${system}${compiler_ext}

 set NETCDF = "${M3LIB}/netcdf/lib -lnetcdf"
 set ODEPACKLIB = "${M3LIB}/odepack -lodepack"
 
 if ( $?ParOpt ) then      # Multiprocessor system configuration
    set PARIO = ${M3LIB}/pario
    set STENEX = ${M3LIB}/se_snl
#   set MPI_INC = ${M3LIB}/mpich/include
    # MPI_INC is set in config.cmaq
    set PAR = ( -Dparallel )
 else
    set PARIO = "."
    set STENEX = "${M3LIB}/se_noop"
    set MPI_INC = "."
 endif

#> Set compiler flags
 set F_FLAGS    = "${myFFLAGS} -I${IOAPIMOD} -I${PARIO} -I${STENEX} -I${MPI_INC} -I${APT_PATH} -I."
 set F90_FLAGS  = "${myFRFLAGS} -I${IOAPIMOD} -I${PARIO} -I${STENEX} -I${MPI_INC} -I${APT_PATH} -I."
 set CPP_FLAGS  = "${PAR}"
 set C_FLAGS    = "${myCFLAGS} -DFLDMN -I${MPI_INC}"
 set LINK_FLAGS = "${myLINK_FLAG}"

#:#:#:#:#:#:#:#:#:#:#:# End of User Input Section :#:#:#:#:#:#:#:#:#:#:#:#:#

#> create a library for cmaq_apt object files
 set Arc = libcmaqapt.a
 if ( -e "$Arc" ) $RM $Arc
 ar rv $Arc *.o

 if ( $?ParOpt ) then      # Multiprocessor system configuration
#   set Mpich = $MPICH 
    set seL = se_snl
    set LIB2 = "-L${M3LIB}/pario -lpario"
    set LIB3 = 
    set LIB4 = "-L${M3LIB}/mpich/lib ${mpi} ${extra_lib}"
    set Str1 = (// Parallel / Include message passing definitions)
    set Str2 = (include SUBST_MPI ${MPI_INC}/mpif.h;)
 else
    set seL = sef90_noop
    set LIB2 =
    set LIB3 =
    set LIB4 =
    set Str1 =
    set Str2 =
 endif

 set LIB1 = "-L${STENEX} -l${seL}"
 set LIB5 = "-L${LIOAPI}"
 set LIB6 = "-L${NETCDF}"
 set LIB7 = "-L${ODEPACKLIB}"
 set LIB8 = "-L${APT_PATH} -lcmaqapt"
 set LIBS = "$LIB8 $LIB7 $LIB1 $LIB2 $LIB3 $LIB4 $LIB5 $LIB6"
 
#>> create the merge_dep utility >>

 setenv MERGE_D ${REPOROOT}/SCICHEM/utilpig/merge_deps
 set MERGE_DEP_EXEC = MERGE_DEP_$EXEC_ID

#> merge_dep:  The "BLD" directory for checking out and compiling source code
 set Bld_d = ${APT_PATH}/merge_dep
 if ( ! -e "$Bld_d" ) then
    mkdir $Bld_d
 else
    if ( ! -d "$Bld_d" ) then
       echo "   *** target exists, but not a directory ***"
       exit 1
    endif
 endif

 cd $Bld_d

#> merge_dep:  remove previous executable
 if ( -e "$MERGE_DEP_EXEC" ) $RM $MERGE_DEP_EXEC

#> merge_dep:  remove previously compiled object files
 set OBJS_MERGE_DEP = (\
      merge_deps.o \
      input1.o \
      open_files.o \
      close_files.o \
      read_griddep.o \
      sum_depos.o \
      write_dep.o \
      updmet.o \
      stubs.o )
 foreach file ( $OBJS_MERGE_DEP )
    if ( -e "$file" ) $RM $file
    end

#> merge_dep:  compile f90 files
 set f90_list_dep = (\
      merge_deps.f90 )

 foreach file ( $f90_list_dep )
    cp -p ${MERGE_D}/$file $Bld_d
    $FC -c $F90_FLAGS $file
    end

#> merge_dep:  compile fixed-format fortran files
 set f_list_dep = (\
      input1.f \
      open_files.f \
      close_files.f \
      read_griddep.f \
      sum_depos.f \
      write_dep.f \
      updmet.f \
      stubs.f )
 foreach file ( $f_list_dep )
    cp -p ${MERGE_D}/$file $Bld_d
    $FC -c $F_FLAGS $file
    end
 
#> merge_dep:  link objects and libraries
 $FC $LINK_FLAGS $OBJS_MERGE_DEP $LIBS -o $MERGE_DEP_EXEC
 if( ! -e $MERGE_DEP_EXEC ) then
  echo " "; echo " ***ERROR*** Compile failed"; echo " "
  exit 1
  endif

 echo " "; echo " Finish building $MERGE_DEP_EXEC "

 exit()
